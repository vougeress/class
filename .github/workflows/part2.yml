name: Advanced Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'models/**'
      - 'backend/**'
  workflow_dispatch:

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r part2/backend/requirements.txt
          python -m pip install -r part2/frontend/requirements.txt

      - name: Run Backend and Test Predict Batch
        run: |
          cd part2/backend
          # Use uvicorn to run the FastAPI app instead of direct python execution
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          BACKEND_PID=$!

          for i in {1..20}; do
            if curl -s http://localhost:8000/health | grep -q '"status":"healthy"'; then
              echo "Backend is up!"
              break
            fi
            sleep 1
          done

          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X 'POST' \
            'http://localhost:8000/predict_batch' \
            -H 'accept: application/json' \
            -H 'Content-Type: multipart/form-data' \
            -F 'file=@../../data/bank-sample.csv;type=text/csv')

          if [ "$RESPONSE" -eq 200 ]; then
            echo "predict_batch endpoint test passed."
          else
            echo "predict_batch endpoint test failed with status $RESPONSE"
            cat response.json
            kill $BACKEND_PID 2>/dev/null || true
            exit 1
          fi

          kill $BACKEND_PID 2>/dev/null || true

  generate-report:
    needs: run-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git push to work

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Generate Report
        run: | 
          precision=$(jq -r '.precision' part2/models/best/metadata.json)
          recall=$(jq -r '.recall' part2/models/best/metadata.json)
          f1=$(jq -r '.f1' part2/models/best/metadata.json)
          model_type=$(jq -r '.model_filename' part2/models/best/metadata.json | sed -E 's/model_(.*)\.joblib/\1/')

          mkdir -p part2/reports
          report_path=part2/reports/best_model_report.md

          echo "# Best Model Report" > "$report_path"
          echo "" >> "$report_path"
          echo "## Model Info" >> "$report_path"
          echo "" >> "$report_path"
          echo "- **Model Type**: $model_type" >> "$report_path"

          echo "- **Parameters**:" >> "$report_path"
          jq -r '.params | to_entries[] | "  - \(.key): \(.value)"' part2/models/best/metadata.json >> "$report_path"
          echo "" >> "$report_path"

          echo "## Metrics" >> "$report_path"
          echo "" >> "$report_path"
          echo "| Metric    | Value |" >> "$report_path"
          echo "|-----------|-------|" >> "$report_path"
          echo "| Precision | $precision |" >> "$report_path"
          echo "| Recall    | $recall |" >> "$report_path"
          echo "| F1 Score  | $f1 |" >> "$report_path"
          echo "" >> "$report_path"

          echo "## Images" >> "$report_path"
          echo "" >> "$report_path"
          # Create images directory in reports and copy images
          mkdir -p part2/reports/images
          for img in part2/models/best/*.png; do
            if [ -f "$img" ]; then
              img_name=$(basename "$img")
              cp "$img" part2/reports/images/
              echo "![$img_name](images/$img_name)" >> "$report_path"
              echo "" >> "$report_path"
            fi
          done

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add part2/reports/
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: auto-generate model report [skip ci]"
            git push origin HEAD:${{ github.ref_name }}
          fi